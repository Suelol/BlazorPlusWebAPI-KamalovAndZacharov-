@page "/login"
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NotificationService NotificationService
@using Microsoft.AspNetCore.Components.Routing
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization
@using System.IdentityModel.Tokens.Jwt
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using System.Timers
@using System.Security.Claims

<style>
    body {
        background-color: #f4f4f9;
        color: #333333;
        font-family: 'Arial', sans-serif;
        margin: 0;
        padding: 0;
    }

    .header {
        background-color: #4CAF50;
        color: #ffffff;
        padding: 20px;
        text-align: center;
        font-size: 24px;
        font-weight: bold;
    }

    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: calc(100vh - 80px); /* Учитываем высоту шапки */
    }

    .login-form {
        background-color: #ffffff;
        padding: 30px;
        border-radius: 8px;
        width: 100%;
        max-width: 400px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .login-form h3 {
        text-align: center;
        margin-bottom: 20px;
        color: #4CAF50;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
        font-size: 14px;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        border: 1px solid #dddddd;
        border-radius: 4px;
        font-size: 14px;
    }

    .btn-primary {
        width: 100%;
        padding: 12px;
        background-color: #4CAF50;
        color: #ffffff;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 16px;
        margin-bottom: 15px;
    }

    .btn-primary:hover {
        background-color: #45a049;
    }

    .alert {
        background-color: #F44336;
        color: #ffffff;
        padding: 10px;
        border-radius: 4px;
        margin-top: 15px;
        text-align: center;
        font-size: 14px;
    }

    .register-link {
        color: #4CAF50;
        text-decoration: none;
        font-weight: bold;
    }

    .register-link:hover {
        text-decoration: underline;
    }

    .spinner-border {
        display: inline-block;
        width: 1rem;
        height: 1rem;
        vertical-align: text-bottom;
        border: 0.25em solid currentColor;
        border-right-color: transparent;
        border-radius: 50%;
        animation: spinner-border 0.75s linear infinite;
    }

    .notification-container {
        position: fixed;
        bottom: 20px;
        right: 20px;
        z-index: 1000;
    }

    .notification {
        padding: 10px 20px;
        margin-bottom: 10px;
        color: white;
        display: flex;
        justify-content: space-between;
        align-items: center;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        animation: fadeIn 0.5s;
    }

        .notification.success {
            background-color: #4CAF50;
        }

        .notification.error {
            background-color: #F44336;
        }

        .notification button {
            background: none;
            border: none;
            color: white;
            cursor: pointer;
            font-size: 16px;
        }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateX(100%);
        }

        to {
            opacity: 1;
            transform: translateX(0);
        }
    }
</style>

<div class="header">
    Авторизация
</div>

<div class="login-container">
    <div class="login-form">
        <h3>Войти</h3>

        <EditForm Model="@loginRequest" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="email">Почта:</label>
                <Microsoft.AspNetCore.Components.Forms.InputText id="email" class="form-control" @bind-Value="loginRequest.Email" />
                <ValidationMessage For="@(() => loginRequest.Email)" />
            </div>

            <div class="form-group">
                <label for="password">Пароль:</label>
                <Microsoft.AspNetCore.Components.Forms.InputText id="password" type="password" class="form-control" @bind-Value="loginRequest.Password" />
                <ValidationMessage For="@(() => loginRequest.Password)" />
            </div>

            <button type="submit" class="btn-primary" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span class="sr-only">Загрузка...</span>
                }
                else
                {
                    <span>Войти</span>
                }
            </button>
        </EditForm>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert">
                @errorMessage
            </div>
        }

        <div class="mt-3" style="text-align: center;">
            <NavLink class="register-link" href="/register">Зарегистрироваться</NavLink>
        </div>
    </div>
</div>


@code {
    private LoginUserRequest loginRequest = new LoginUserRequest();
    private string errorMessage;
    private bool isLoading;
    private bool isInitialized = false;
    private string currentUserRole;

    private List<NotificationService.NotificationModel> Notifications = new List<NotificationService.NotificationModel>();

    protected override void OnInitialized()
    {
        NotificationService.OnNotificationAdded += HandleNotificationAdded;
    }

    private void HandleNotificationAdded(NotificationService.NotificationModel notification)
    {
        Notifications.Add(notification);
        StateHasChanged();

        var timer = new Timer(5000);
        timer.Elapsed += (sender, args) =>
        {
            InvokeAsync(() =>
            {
                RemoveNotification(notification.Id);
                StateHasChanged();
            });
            timer.Dispose();
        };
        timer.Start();
    }

    private void RemoveNotification(Guid id)
    {
        var notification = Notifications.FirstOrDefault(n => n.Id == id);
        if (notification != null)
        {
            Notifications.Remove(notification);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            var token = await LocalStorage.GetItemAsync<string>("authToken");

            if (!string.IsNullOrEmpty(token) && IsTokenValid(token))
            {
                Navigation.NavigateTo("/users");
            }

            isInitialized = true;
            StateHasChanged(); 
        }
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            var httpClient = HttpClientFactory.CreateClient("UnauthorizedClient");
            var response = await httpClient.PostAsJsonAsync("api/UserLogin/Login", loginRequest);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                if (result != null && !string.IsNullOrEmpty(result.Token))
                {
                    await LocalStorage.SetItemAsync("authToken", result.Token);
                    await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).NotifyUserAuthentication(result.Token);

                    currentUserRole = GetUserRoleFromToken(result.Token);

                    NotificationService.ShowSuccess("Авторизация прошла успешно!");

                    await Task.Delay(2000); 

                    if (currentUserRole == "Администратор")
                    {
                        Navigation.NavigateTo("/users");
                    }
                    else
                    {
                        Navigation.NavigateTo("/profile");
                    }
                }
                else
                {
                    errorMessage = "Токен отсутствует в ответе.";
                    NotificationService.ShowError("Токен отсутствует в ответе.");
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                NotificationService.ShowError("Ошибка авторизации.");
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Произошла ошибка при авторизации.";
            NotificationService.ShowError("Произошла ошибка при авторизации.");
            Console.WriteLine(ex.ToString());
        }
        finally
        {
            isLoading = false;
        }
    }

    private bool IsTokenValid(string token)
    {
        try
        {
            var handler = new JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);
            return jwtToken.ValidTo > DateTime.UtcNow;
        }
        catch
        {
            return false;
        }
    }

    private string GetUserRoleFromToken(string token)
    {
        try
        {
            var handler = new JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);

            var role = jwtToken.Claims
                .FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value;

            return role;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Ошибка при чтении роли из токена: " + ex.Message);
            return null;
        }
    }

    public class LoginUserRequest
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }

    public class LoginResponse
    {
        public string Token { get; set; }
    }
}